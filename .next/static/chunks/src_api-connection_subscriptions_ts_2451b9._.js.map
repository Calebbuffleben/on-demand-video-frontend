{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/api-connection/subscriptions.ts"],"sourcesContent":["/**\n * Mock subscription service implementation\n * \n * This is a temporary mock implementation of the subscription service\n * that returns static data instead of making API calls. This is used\n * until the backend API is fully implemented.\n */\n\n// Static implementation with predetermined return values\nconst subscriptionService = {\n  // Get current user's subscription - always returns a default response\n  getCurrentSubscription() {\n    return Promise.resolve({\n      status: 'no_subscription',\n      subscription: null,\n      message: 'Subscription API not available yet'\n    });\n  },\n\n  // Create a checkout session - simulates a successful checkout creation\n  createCheckoutSession() {\n    return Promise.resolve({\n      sessionId: 'mock-session-id',\n      sessionUrl: 'https://example.com/checkout/mock-session'\n    });\n  },\n\n  // Get organizations for the current user - returns an empty array\n  getOrganizations() {\n    return Promise.resolve({\n      organizations: []\n    });\n  },\n\n  // Cancel subscription - simulates a successful cancellation\n  cancelSubscription() {\n    return Promise.resolve({\n      success: true,\n      message: 'Subscription cancelled successfully (mock)'\n    });\n  }\n};\n\nexport default subscriptionService;"],"names":[],"mappings":"AAAA;;;;;;CAMC,GAED,yDAAyD;;;;AACzD,MAAM,sBAAsB;IAC1B,sEAAsE;IACtE;QACE,OAAO,QAAQ,OAAO,CAAC;YACrB,QAAQ;YACR,cAAc;YACd,SAAS;QACX;IACF;IAEA,uEAAuE;IACvE;QACE,OAAO,QAAQ,OAAO,CAAC;YACrB,WAAW;YACX,YAAY;QACd;IACF;IAEA,kEAAkE;IAClE;QACE,OAAO,QAAQ,OAAO,CAAC;YACrB,eAAe,EAAE;QACnB;IACF;IAEA,4DAA4D;IAC5D;QACE,OAAO,QAAQ,OAAO,CAAC;YACrB,SAAS;YACT,SAAS;QACX;IACF;AACF;uCAEe"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}