{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { clerkMiddleware, createRouteMatcher } from \"@clerk/nextjs/server\";\n\n// Public routes that don't require authentication\nconst isPublicRoute = createRouteMatcher([\n  '/',\n  '/sign-in(.*)',\n  '/sign-up(.*)',\n  '/test-clerk(.*)',\n  '/create-organization(.*)',\n  '/organization-profile(.*)',\n  '/organization-selector(.*)',\n  '/api/public/(.*)'\n]);\n\n// Organization routes with different access levels\nconst isOrgRoute = createRouteMatcher([\n  '/([^/]+)/dashboard',\n  '/([^/]+)/products',\n  '/([^/]+)/settings'\n]);\n\nconst isOrgAdminRoute = createRouteMatcher([\n  '/([^/]+)/members',\n  '/([^/]+)/billing',\n  '/([^/]+)/settings/advanced'\n]);\n\nconst isOrgOwnerRoute = createRouteMatcher([\n  '/([^/]+)/danger-zone',\n  '/([^/]+)/delete'\n]);\n\nexport default clerkMiddleware(async (auth, req) => {\n  // Allow public routes\n  if (isPublicRoute(req)) {\n    return NextResponse.next();\n  }\n\n  // Get organization ID from URL - first path segment after the domain\n  const pathSegments = req.nextUrl.pathname.split('/').filter(Boolean);\n  const tenantId = pathSegments.length > 0 ? pathSegments[0] : null;\n\n  // Handle organization routes\n  if (isOrgRoute(req)) {\n    // Basic member access\n    await auth.protect();\n    \n    if (tenantId) {\n      // Add organization context to headers\n      const requestHeaders = new Headers(req.headers);\n      requestHeaders.set('x-organization-id', tenantId);\n      \n      return NextResponse.next({\n        request: { headers: requestHeaders }\n      });\n    }\n  }\n\n  // Handle admin routes\n  if (isOrgAdminRoute(req)) {\n    await auth.protect((has) => {\n      return has({ permission: 'org:admin' }) || \n             has({ permission: 'org:owner' });\n    });\n    \n    if (tenantId) {\n      // Add organization context to headers\n      const requestHeaders = new Headers(req.headers);\n      requestHeaders.set('x-organization-id', tenantId);\n      \n      return NextResponse.next({\n        request: { headers: requestHeaders }\n      });\n    }\n  }\n\n  // Handle owner-only routes\n  if (isOrgOwnerRoute(req)) {\n    await auth.protect((has) => has({ permission: 'org:owner' }));\n    \n    if (tenantId) {\n      // Add organization context to headers\n      const requestHeaders = new Headers(req.headers);\n      requestHeaders.set('x-organization-id', tenantId);\n      \n      return NextResponse.next({\n        request: { headers: requestHeaders }\n      });\n    }\n  }\n\n  // If no organization in path but user is authenticated\n  if (!tenantId && !isPublicRoute(req)) {\n    await auth.protect();\n    return NextResponse.redirect(new URL('/organization-selector', req.url));\n  }\n\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: [\"/((?!.+\\\\.[\\\\w]+$|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n};"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AADA;;;AAGA,kDAAkD;AAClD,MAAM,gBAAgB,CAAA,GAAA,0KAAA,CAAA,qBAAkB,AAAD,EAAE;IACvC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,mDAAmD;AACnD,MAAM,aAAa,CAAA,GAAA,0KAAA,CAAA,qBAAkB,AAAD,EAAE;IACpC;IACA;IACA;CACD;AAED,MAAM,kBAAkB,CAAA,GAAA,0KAAA,CAAA,qBAAkB,AAAD,EAAE;IACzC;IACA;IACA;CACD;AAED,MAAM,kBAAkB,CAAA,GAAA,0KAAA,CAAA,qBAAkB,AAAD,EAAE;IACzC;IACA;CACD;uCAEc,CAAA,GAAA,6KAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,MAAM;IAC1C,sBAAsB;IACtB,IAAI,cAAc,MAAM;QACtB,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,qEAAqE;IACrE,MAAM,eAAe,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC;IAC5D,MAAM,WAAW,aAAa,MAAM,GAAG,IAAI,YAAY,CAAC,EAAE,GAAG;IAE7D,6BAA6B;IAC7B,IAAI,WAAW,MAAM;QACnB,sBAAsB;QACtB,MAAM,KAAK,OAAO;QAElB,IAAI,UAAU;YACZ,sCAAsC;YACtC,MAAM,iBAAiB,IAAI,QAAQ,IAAI,OAAO;YAC9C,eAAe,GAAG,CAAC,qBAAqB;YAExC,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;oBAAE,SAAS;gBAAe;YACrC;QACF;IACF;IAEA,sBAAsB;IACtB,IAAI,gBAAgB,MAAM;QACxB,MAAM,KAAK,OAAO,CAAC,CAAC;YAClB,OAAO,IAAI;gBAAE,YAAY;YAAY,MAC9B,IAAI;gBAAE,YAAY;YAAY;QACvC;QAEA,IAAI,UAAU;YACZ,sCAAsC;YACtC,MAAM,iBAAiB,IAAI,QAAQ,IAAI,OAAO;YAC9C,eAAe,GAAG,CAAC,qBAAqB;YAExC,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;oBAAE,SAAS;gBAAe;YACrC;QACF;IACF;IAEA,2BAA2B;IAC3B,IAAI,gBAAgB,MAAM;QACxB,MAAM,KAAK,OAAO,CAAC,CAAC,MAAQ,IAAI;gBAAE,YAAY;YAAY;QAE1D,IAAI,UAAU;YACZ,sCAAsC;YACtC,MAAM,iBAAiB,IAAI,QAAQ,IAAI,OAAO;YAC9C,eAAe,GAAG,CAAC,qBAAqB;YAExC,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;oBAAE,SAAS;gBAAe;YACrC;QACF;IACF;IAEA,uDAAuD;IACvD,IAAI,CAAC,YAAY,CAAC,cAAc,MAAM;QACpC,MAAM,KAAK,OAAO;QAClB,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,0BAA0B,IAAI,GAAG;IACxE;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAA+B;QAAK;KAAkB;AAClE"}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}