{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/pages/_document.tsx"],"sourcesContent":["import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body className=\"antialiased\">\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,qKAAC,yHAAA,CAAA,OAAI;QAAC,MAAK;;0BACT,qKAAC,yHAAA,CAAA,OAAI;;;;;0BACL,qKAAC;gBAAK,WAAU;;kCACd,qKAAC,yHAAA,CAAA,OAAI;;;;;kCACL,qKAAC,yHAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;AAInB"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useClerk, useUser } from '@clerk/nextjs';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: any;\n  loading: boolean;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const { signOut } = useClerk();\n  const { user, isLoaded: isUserLoaded } = useUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (isUserLoaded) {\n      setLoading(false);\n    }\n  }, [isUserLoaded]);\n\n  const logout = async () => {\n    await signOut();\n    router.push('/sign-in');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated: !!user,\n        user,\n        loading,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const useAuthService = () => {\n  const { session, user } = useClerk();\n\n  const getToken = async (): Promise<string | null> => {\n    try {\n      if (!session) return null;\n      return await session.getToken();\n    } catch (error) {\n      console.error('Error getting token:', error);\n      return null;\n    }\n  };\n\n  const isAuthenticated = (): boolean => {\n    return !!user;\n  };\n\n  const getUserDetails = () => {\n    if (!user) return null;\n    \n    return {\n      id: user.id,\n      fullName: `${user.firstName} ${user.lastName}`,\n      email: user.primaryEmailAddress?.emailAddress,\n      imageUrl: user.imageUrl\n    };\n  };\n\n  return {\n    getToken,\n    isAuthenticated,\n    getUserDetails\n  };\n};"],"names":[],"mappings":";;;;;;AAEA;AACA;AACA;AAJA;;;;;AAaA,MAAM,4BAAc,CAAA,GAAA,mGAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAwD,CAAC,EAAE,QAAQ,EAAE;IAChF,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,WAAQ,AAAD;IAC3B,MAAM,EAAE,IAAI,EAAE,UAAU,YAAY,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAO,AAAD;IAC/C,MAAM,SAAS,CAAA,GAAA,uHAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,cAAc;YAChB,WAAW;QACb;IACF,GAAG;QAAC;KAAa;IAEjB,MAAM,SAAS;QACb,MAAM;QACN,OAAO,IAAI,CAAC;IACd;IAEA,qBACE,qKAAC,YAAY,QAAQ;QACnB,OAAO;YACL,iBAAiB,CAAC,CAAC;YACnB;YACA;YACA;QACF;kBAEC;;;;;;AAGP;AAEO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,mGAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAEO,MAAM,iBAAiB;IAC5B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,WAAQ,AAAD;IAEjC,MAAM,WAAW;QACf,IAAI;YACF,IAAI,CAAC,SAAS,OAAO;YACrB,OAAO,MAAM,QAAQ,QAAQ;QAC/B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO;QACT;IACF;IAEA,MAAM,kBAAkB;QACtB,OAAO,CAAC,CAAC;IACX;IAEA,MAAM,iBAAiB;QACrB,IAAI,CAAC,MAAM,OAAO;QAElB,OAAO;YACL,IAAI,KAAK,EAAE;YACX,UAAU,GAAG,KAAK,SAAS,CAAC,CAAC,EAAE,KAAK,QAAQ,EAAE;YAC9C,OAAO,KAAK,mBAAmB,EAAE;YACjC,UAAU,KAAK,QAAQ;QACzB;IACF;IAEA,OAAO;QACL;QACA;QACA;IACF;AACF"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/hooks/useClerkToken.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useClerk, useUser, useOrganization } from '@clerk/nextjs';\n\n/**\n * This hook ensures the Clerk token is stored in localStorage\n * so the API service can use it for authenticated requests\n */\nexport function useClerkToken() {\n  const { session } = useClerk();\n  const { user, isLoaded: userLoaded } = useUser();\n  const { organization, isLoaded: orgLoaded } = useOrganization();\n  const [lastOrgId, setLastOrgId] = useState<string | null>(null);\n  \n  // This effect handles token storage when organization changes\n  useEffect(() => {\n    // Wait until both user and organization data are loaded\n    if (!userLoaded || !orgLoaded) return;\n    \n    // Skip if organization hasn't changed\n    if (organization?.id === lastOrgId) return;\n    \n    // Update last org id\n    setLastOrgId(organization?.id || null);\n    \n    const storeToken = async () => {\n      if (!session) {\n        console.warn('No active session found');\n        localStorage.removeItem('token');\n        return;\n      }\n      \n      try {\n        console.log('Getting token from Clerk session...');\n        console.log('Current organization:', organization?.id, organization?.name);\n        \n        // Get organization-aware token - ensure our JWT template includes org claims\n        const tokenOptions = organization?.id \n          ? { \n              template: 'token_videos_on_demand_2',  // Use a template with organization claims\n              // You can also provide session data if needed\n              session: {\n                resources: [\"organization\"],\n                organizationId: organization.id,\n              }\n            } \n          : {};\n        \n        const token = await session.getToken(tokenOptions);\n        \n        if (token) {\n          // Store token with organization info\n          localStorage.setItem('token', token);\n          \n          // Store current organization ID separately for reference\n          if (organization?.id) {\n            localStorage.setItem('currentOrganizationId', organization.id);\n          } else {\n            localStorage.removeItem('currentOrganizationId');\n          }\n          \n          console.log('Token stored successfully with organization context');\n          \n          // Log user membership info for debugging\n          if (user) {\n            console.log('User organizations:', user.organizationMemberships?.length || 0);\n            user.organizationMemberships?.forEach(membership => {\n              const isActive = membership.organization.id === organization?.id;\n              console.log(`- Org: ${membership.organization.name} (${membership.organization.id}), Role: ${membership.role}${isActive ? ' [ACTIVE]' : ''}`);\n            });\n          }\n        } else {\n          console.warn('Empty token received from Clerk');\n        }\n      } catch (error) {\n        console.error('Failed to get or store Clerk token:', error);\n      }\n    };\n    \n    // Store token initially\n    storeToken();\n  }, [session, user, userLoaded, organization, orgLoaded, lastOrgId]);\n  \n  // This effect sets up token refresh on an interval\n  useEffect(() => {\n    // Setup polling interval to refresh token\n    const intervalId = setInterval(() => {\n      // Only refresh if we have a session and user is loaded\n      if (session && userLoaded) {\n        // This will trigger the above effect if organization has changed\n        setLastOrgId(organization?.id || null);\n      }\n    }, 1000 * 60 * 5); // Check every 5 minutes\n    \n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [session, userLoaded, organization]);\n}\n\nexport default useClerkToken; "],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;AASO,SAAS;IACd,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,WAAQ,AAAD;IAC3B,MAAM,EAAE,IAAI,EAAE,UAAU,UAAU,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAO,AAAD;IAC7C,MAAM,EAAE,YAAY,EAAE,UAAU,SAAS,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,kBAAe,AAAD;IAC5D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAiB;IAE1D,8DAA8D;IAC9D,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,wDAAwD;QACxD,IAAI,CAAC,cAAc,CAAC,WAAW;QAE/B,sCAAsC;QACtC,IAAI,cAAc,OAAO,WAAW;QAEpC,qBAAqB;QACrB,aAAa,cAAc,MAAM;QAEjC,MAAM,aAAa;YACjB,IAAI,CAAC,SAAS;gBACZ,QAAQ,IAAI,CAAC;gBACb,aAAa,UAAU,CAAC;gBACxB;YACF;YAEA,IAAI;gBACF,QAAQ,GAAG,CAAC;gBACZ,QAAQ,GAAG,CAAC,yBAAyB,cAAc,IAAI,cAAc;gBAErE,6EAA6E;gBAC7E,MAAM,eAAe,cAAc,KAC/B;oBACE,UAAU;oBACV,8CAA8C;oBAC9C,SAAS;wBACP,WAAW;4BAAC;yBAAe;wBAC3B,gBAAgB,aAAa,EAAE;oBACjC;gBACF,IACA,CAAC;gBAEL,MAAM,QAAQ,MAAM,QAAQ,QAAQ,CAAC;gBAErC,IAAI,OAAO;oBACT,qCAAqC;oBACrC,aAAa,OAAO,CAAC,SAAS;oBAE9B,yDAAyD;oBACzD,IAAI,cAAc,IAAI;wBACpB,aAAa,OAAO,CAAC,yBAAyB,aAAa,EAAE;oBAC/D,OAAO;wBACL,aAAa,UAAU,CAAC;oBAC1B;oBAEA,QAAQ,GAAG,CAAC;oBAEZ,yCAAyC;oBACzC,IAAI,MAAM;wBACR,QAAQ,GAAG,CAAC,uBAAuB,KAAK,uBAAuB,EAAE,UAAU;wBAC3E,KAAK,uBAAuB,EAAE,QAAQ,CAAA;4BACpC,MAAM,WAAW,WAAW,YAAY,CAAC,EAAE,KAAK,cAAc;4BAC9D,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,WAAW,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,YAAY,CAAC,EAAE,CAAC,SAAS,EAAE,WAAW,IAAI,GAAG,WAAW,cAAc,IAAI;wBAC9I;oBACF;gBACF,OAAO;oBACL,QAAQ,IAAI,CAAC;gBACf;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,uCAAuC;YACvD;QACF;QAEA,wBAAwB;QACxB;IACF,GAAG;QAAC;QAAS;QAAM;QAAY;QAAc;QAAW;KAAU;IAElE,mDAAmD;IACnD,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,0CAA0C;QAC1C,MAAM,aAAa,YAAY;YAC7B,uDAAuD;YACvD,IAAI,WAAW,YAAY;gBACzB,iEAAiE;gBACjE,aAAa,cAAc,MAAM;YACnC;QACF,GAAG,OAAO,KAAK,IAAI,wBAAwB;QAE3C,OAAO;YACL,cAAc;QAChB;IACF,GAAG;QAAC;QAAS;QAAY;KAAa;AACxC;uCAEe"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/components/TokenProvider.tsx"],"sourcesContent":["'use client';\n\nimport { ReactNode } from 'react';\nimport useClerkToken from '../hooks/useClerkToken';\n\ninterface TokenProviderProps {\n  children: ReactNode;\n}\n\nexport function TokenProvider({ children }: TokenProviderProps) {\n  // This hook handles storing the Clerk token in localStorage\n  useClerkToken();\n  \n  // Just render children - the hook does the work\n  return <>{children}</>;\n}\n\nexport default TokenProvider; "],"names":[],"mappings":";;;;;AAGA;AAHA;;;AASO,SAAS,cAAc,EAAE,QAAQ,EAAsB;IAC5D,4DAA4D;IAC5D,CAAA,GAAA,sHAAA,CAAA,UAAa,AAAD;IAEZ,gDAAgD;IAChD,qBAAO;kBAAG;;AACZ;uCAEe"}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/pages/_app.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport type { AppProps } from \"next/app\";\nimport { AuthProvider } from \"../contexts/AuthContext\";\nimport TokenProvider from \"../components/TokenProvider\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <ClerkProvider {...pageProps}>\n      <TokenProvider>\n        <AuthProvider>\n          <Component {...pageProps} />\n        </AuthProvider>\n      </TokenProvider>\n    </ClerkProvider>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AAHA;;;;;;AAKe,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAY;IAC5D,qBACE,qKAAC,kKAAA,CAAA,gBAAa;QAAE,GAAG,SAAS;kBAC1B,cAAA,qKAAC,4HAAA,CAAA,UAAa;sBACZ,cAAA,qKAAC,wHAAA,CAAA,eAAY;0BACX,cAAA,qKAAC;oBAAW,GAAG,SAAS;;;;;;;;;;;;;;;;;;;;;AAKlC"}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/api-connection/service.ts"],"sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: process.env.BACKEND_URL || 'http://localhost:4000', // Updated to match backend port\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    withCredentials: true\n});\n\n// Add request interceptor to include Clerk token from localStorage\napi.interceptors.request.use(\n    async (config) => {\n        if (typeof window === 'undefined') {\n            // We're on the server, so don't attempt to use localStorage\n            console.log('API request on server side - skipping auth token');\n            return config;\n        }\n        \n        // Get token from local storage\n        const token = localStorage.getItem('token');\n        const clerkOrgId = localStorage.getItem('currentOrganizationId');\n        const dbOrgId = localStorage.getItem('dbOrganizationId');\n        \n        // Log request details for debugging\n        console.log(`API ${config.method?.toUpperCase()} request to: ${config.url}`);\n        \n        if (token) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n            \n            // Add organization context headers if available\n            if (clerkOrgId) {\n                // Always use Clerk ID for auth context\n                config.headers['X-Organization-Id'] = clerkOrgId;\n                console.log('Including Clerk organization ID:', clerkOrgId);\n            }\n            \n            // For endpoints that need database ID format\n            if (dbOrgId) {\n                config.headers['X-DB-Organization-Id'] = dbOrgId;\n                console.log('Including database organization ID:', dbOrgId);\n            }\n            \n            // For subscriptions endpoints, prioritize using database ID in URL\n            if (config.url && config.url.includes('/api/subscriptions/')) {\n                // If URL ends with 'current' or ID is already embedded, don't modify\n                if (!config.url.endsWith('/current') && \n                    !config.url.match(/\\/api\\/subscriptions\\/[a-zA-Z0-9_-]+$/)) {\n                    \n                    // Use database ID if available, otherwise use Clerk ID\n                    const orgIdForUrl = dbOrgId || clerkOrgId;\n                    if (orgIdForUrl) {\n                        config.url = `/api/subscriptions/${orgIdForUrl}`;\n                        console.log('Using organization ID in URL:', orgIdForUrl);\n                    }\n                }\n            }\n            \n            // Log token for debugging (truncated for security)\n            if (token.length > 20) {\n                console.log('Using token:', token.substring(0, 15) + '...');\n            }\n        } else {\n            console.warn('No authentication token found');\n        }\n        \n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n    (response) => {\n        console.log(`API response from ${response.config.url}: Status ${response.status}`);\n        \n        // Only attempt to use localStorage on the client\n        if (typeof window !== 'undefined') {\n            // Check for organization ID in response and save it\n            if (response.data?.organization?.id) {\n                // If the ID format suggests a database ID (UUID), save it\n                if (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(response.data.organization.id)) {\n                    console.log('Saving database organization ID from response:', response.data.organization.id);\n                    localStorage.setItem('dbOrganizationId', response.data.organization.id);\n                }\n                \n                // If there's a clerkId field, save that too\n                if (response.data.organization.clerkId) {\n                    console.log('Saving Clerk organization ID from response:', response.data.organization.clerkId);\n                    localStorage.setItem('currentOrganizationId', response.data.organization.clerkId);\n                }\n            }\n        }\n        \n        return response;\n    },\n    (error) => {\n        console.error('API error:', error?.response?.data || error.message);\n        \n        // Only attempt to use localStorage and event dispatching on the client\n        if (typeof window !== 'undefined') {\n            // Get organization context for better error handling\n            const clerkOrgId = localStorage.getItem('currentOrganizationId');\n            const dbOrgId = localStorage.getItem('dbOrganizationId');\n            \n            // Handle specific error conditions\n            if (error.response?.status === 401) {\n                // Unauthorized - token is invalid or missing\n                console.error('Authentication error: Your session may have expired');\n                window.dispatchEvent(new CustomEvent('auth:unauthorized'));\n            } else if (error.response?.status === 400) {\n                // Organization access issue\n                console.error('Request error:', error.response.data.message);\n                \n                // Log detailed request info for debugging\n                console.error('Request URL:', error.config?.url);\n                console.error('Request headers:', JSON.stringify({\n                    'Authorization': error.config?.headers?.Authorization ? 'Bearer [REDACTED]' : 'None',\n                    'X-Organization-Id': error.config?.headers?.['X-Organization-Id'] || 'None',\n                    'X-DB-Organization-Id': error.config?.headers?.['X-DB-Organization-Id'] || 'None'\n                }));\n                console.log('Request details:', {\n                    method: error.config?.method,\n                    params: error.config?.params,\n                    data: error.config?.data\n                });\n                \n                console.log('Organization IDs:', {\n                    clerkId: clerkOrgId,\n                    dbId: dbOrgId\n                });\n                \n                // If error is organization related, check auth state\n                if (error.response?.data?.message?.includes('organization')) {\n                    window.dispatchEvent(new CustomEvent('org:accessdenied', {\n                        detail: { message: error.response.data.message }\n                    }));\n                }\n            }\n        }\n        \n        return Promise.reject(error);\n    }\n);\n\nexport default api;"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,MAAM,MAAM,0GAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACrB,SAAS,QAAQ,GAAG,CAAC,WAAW,IAAI;IACpC,SAAS;QACL,gBAAgB;IACpB;IACA,iBAAiB;AACrB;AAEA,mEAAmE;AACnE,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CACxB,OAAO;IACH,wCAAmC;QAC/B,4DAA4D;QAC5D,QAAQ,GAAG,CAAC;QACZ,OAAO;IACX;;IAEA,+BAA+B;IAC/B,MAAM;IACN,MAAM;IACN,MAAM;AA6CV,GACA,CAAC;IACG,OAAO,QAAQ,MAAM,CAAC;AAC1B;AAGJ,8CAA8C;AAC9C,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CACzB,CAAC;IACG,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,SAAS,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,MAAM,EAAE;IAEjF,iDAAiD;IACjD,uCAAmC;;IAenC;IAEA,OAAO;AACX,GACA,CAAC;IACG,QAAQ,KAAK,CAAC,cAAc,OAAO,UAAU,QAAQ,MAAM,OAAO;IAElE,uEAAuE;IACvE,uCAAmC;;IAuCnC;IAEA,OAAO,QAAQ,MAAM,CAAC;AAC1B;uCAGW"}},
    {"offset": {"line": 486, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/api-connection/subscriptions.ts"],"sourcesContent":["import api from './service';\n\nexport const subscriptionService = {\n  // Get current user's subscription\n  getCurrentSubscription: async () => {\n    console.log('Fetching current subscription...');\n    \n    // First check if we have the required data\n    if (typeof window === 'undefined') {\n      throw new Error('Cannot call subscription service on server-side rendering');\n    }\n    \n    const token = localStorage.getItem('token');\n    const orgId = localStorage.getItem('currentOrganizationId'); // Clerk organization ID\n    const dbOrgId = localStorage.getItem('dbOrganizationId'); // Database organization ID\n    \n    if (!token) {\n      console.error('No token available for subscription request');\n      throw new Error('Authentication token is missing');\n    }\n    \n    if (!orgId) {\n      console.error('No organization ID available for subscription request');\n      throw new Error('Organization ID is missing');\n    }\n    \n    console.log('Making API call with organization:', orgId);\n    \n    // Call different endpoint that doesn't rely on header\n    try {\n      // Try the direct endpoint with organization ID parameter - prioritize database ID\n      if (dbOrgId) {\n        console.log('Using database organization ID for API call:', dbOrgId);\n        const response = await api.get(`/api/subscriptions/${dbOrgId}`);\n        console.log('Subscription API response:', response.status);\n        return response.data;\n      } else {\n        // Fall back to Clerk ID if database ID is not available\n        console.log('Using Clerk organization ID for API call:', orgId);\n        const response = await api.get(`/api/subscriptions/${orgId}`);\n        console.log('Subscription API response:', response.status);\n        return response.data;\n      }\n    } catch (error: any) {\n      console.error('Failed to get subscription by ID, falling back to current endpoint:', error);\n      \n      // Fall back to the current endpoint\n      try {\n        const response = await api.get('/api/subscriptions/current');\n        console.log('Fallback subscription API response:', response.status);\n        return response.data;\n      } catch (error: any) {\n        handleSubscriptionError(error);\n        throw error;\n      }\n    }\n  },\n\n  // Create a checkout session\n  createCheckoutSession: async (priceId: string) => {\n    try {\n      const response = await api.post('/api/subscriptions/create-checkout', { priceId });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create checkout session:', error);\n      throw error;\n    }\n  },\n\n  // Cancel subscription\n  cancelSubscription: async (subscriptionId: string) => {\n    try {\n      const response = await api.put(`/api/subscriptions/${subscriptionId}/cancel`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to cancel subscription:', error);\n      throw error;\n    }\n  },\n\n  // Get available subscription plans\n  getSubscriptionPlans: async () => {\n    try {\n      const response = await api.get('/api/subscriptions/plans');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get subscription plans:', error);\n      throw error;\n    }\n  }\n};\n\n// Helper function to handle subscription errors\nfunction handleSubscriptionError(error: any) {\n  console.error('Subscription error:', error?.response?.data || error.message);\n  \n  // Provide more specific error messages\n  if (error.response?.status === 401) {\n    throw new Error('Your session has expired. Please sign in again.');\n  } else if (error.response?.status === 403) {\n    throw new Error('You do not have permission to access this subscription.');\n  } else if (error.response?.status === 404) {\n    throw new Error('Subscription not found. You may need to subscribe first.');\n  } else if (error.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n}\n\nexport default subscriptionService;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 606, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/components/ui/SignOutComponent/SignOutComponent.tsx"],"sourcesContent":["'use client'\n\nimport { useClerk } from '@clerk/nextjs'\n\nconst SignOutComponent = () => {\n  const { signOut } = useClerk()\n\n  return (\n    // Clicking this button signs out a user\n    // and redirects them to the home page \"/\".\n    <button onClick={() => signOut({ redirectUrl: '/' })}>Sign out</button>\n  )\n}\n\nexport default SignOutComponent;\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIA,MAAM,mBAAmB;IACvB,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,WAAQ,AAAD;IAE3B,OACE,wCAAwC;IACxC,2CAA2C;kBAC3C,qKAAC;QAAO,SAAS,IAAM,QAAQ;gBAAE,aAAa;YAAI;kBAAI;;;;;;AAE1D;uCAEe"}},
    {"offset": {"line": 630, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/pages/%5BtenantId%5D/dashboard/index.tsx"],"sourcesContent":["'use client'\n\nimport subscriptionService from \"@/api-connection/subscriptions\";\nimport SignOutComponent from \"@/components/ui/SignOutComponent/SignOutComponent\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useOrganization } from \"@clerk/nextjs\";\nimport { useRouter } from \"next/router\";\n\nconst DashboardPage = () => {\n    const [subscription, setSubscription] = useState<null | any>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [loading, setLoading] = useState(true);\n    const [debugInfo, setDebugInfo] = useState<any>({});\n    const [apiTestResult, setApiTestResult] = useState<any>(null);\n    const [apiTestLoading, setApiTestLoading] = useState(false);\n    const { organization, isLoaded: orgLoaded } = useOrganization();\n    const router = useRouter();\n    const { tenantId } = router.query;\n    const redirectAttempted = useRef(false);\n    const subscriptionRequested = useRef(false);\n    // Initialize state without localStorage\n    const [dbOrgId, setDbOrgId] = useState<string | null>(null);\n    \n    // Load localStorage values only on client\n    useEffect(() => {\n        // This code only runs on the client\n        const savedOrgId = localStorage.getItem('dbOrganizationId');\n        if (savedOrgId) {\n            setDbOrgId(savedOrgId);\n        }\n    }, []);\n      \n    // Force Clerk organization context into localStorage\n    useEffect(() => {\n        if (orgLoaded && organization?.id) {\n            // Always ensure the organization ID from Clerk is in localStorage\n            localStorage.setItem('currentOrganizationId', organization.id);\n            console.log('Set organization ID from Clerk:', organization.id);\n        }\n    }, [orgLoaded, organization]);\n      \n    useEffect(() => {\n        // Safe way to access localStorage in Next.js\n        const getLocalStorageData = () => {\n            if (typeof window === 'undefined') return null;\n            \n            return {\n                token: localStorage.getItem('token') ? 'Present' : 'Missing',\n                clerkOrgId: localStorage.getItem('currentOrganizationId') || 'None',\n                dbOrgId: localStorage.getItem('dbOrganizationId') || 'None'\n            };\n        };\n        \n        const getPathData = () => {\n            return typeof window !== 'undefined' ? window.location.pathname : 'No window';\n        };\n        \n        // Update debug info\n        setDebugInfo({\n            organizationLoaded: orgLoaded, \n            organizationId: organization?.id || 'None',\n            databaseOrgId: dbOrgId || (typeof window !== 'undefined' ? localStorage.getItem('dbOrganizationId') : null) || 'None',\n            tenantId: tenantId || 'None',\n            redirectAttempted: redirectAttempted.current,\n            subscriptionRequested: subscriptionRequested.current,\n            localStorage: getLocalStorageData() || 'No window',\n            path: getPathData()\n        });\n        \n        // Don't proceed until Clerk organization is loaded\n        if (!orgLoaded) {\n            return;\n        }\n        \n        // Handle URL with template placeholder\n        if (tenantId === '{organizationId}' && organization?.id && !redirectAttempted.current) {\n            redirectAttempted.current = true;\n            \n            // Try to redirect to correct URL\n            try {\n                const correctPath = window.location.pathname.replace('{organizationId}', organization.id);\n                console.log('Redirecting to correct path with organization ID:', correctPath);\n                router.push(correctPath);\n                return;\n            } catch (err) {\n                console.error('Failed to redirect:', err);\n                // Continue with template URL but use Clerk organization\n            }\n        }\n        \n        // If we have organization context, fetch subscription (but only once)\n        if (organization?.id && !subscriptionRequested.current) {\n            console.log('Fetching subscription using organization from Clerk:', organization.id);\n            subscriptionRequested.current = true;\n            fetchSubscription();\n        }\n        // If we have a valid organization ID in the URL, use that (but only once)\n        else if (tenantId && typeof tenantId === 'string' && \n                tenantId.startsWith('org_') && \n                !subscriptionRequested.current) {\n            console.log('Fetching subscription using organization from URL:', tenantId);\n            localStorage.setItem('currentOrganizationId', tenantId);\n            subscriptionRequested.current = true;\n            fetchSubscription();\n        }\n        // If we have an organization ID in localStorage but not from other sources, use that (but only once)\n        else if (typeof window !== 'undefined' && \n                localStorage.getItem('currentOrganizationId') && \n                !subscriptionRequested.current) {\n            console.log('Fetching subscription using organization from localStorage');\n            subscriptionRequested.current = true;\n            fetchSubscription();\n        }\n        // If we've already tried to fetch but got an error, show the error\n        else if (subscriptionRequested.current && !loading && !subscription) {\n            setError(\"No organization context available or subscription could not be loaded\");\n        }\n    }, [orgLoaded, organization, tenantId, router, loading, subscription, dbOrgId]);\n    \n\n    const fetchSubscription = async () => {\n        // Don't attempt to fetch on server\n        if (typeof window === 'undefined') return;\n        \n        setLoading(true);\n        setError(null);\n        try {\n            // Use the Clerk organization ID directly\n            if (organization?.id) {\n                console.log('Using organization ID from Clerk for API call:', organization.id);\n                localStorage.setItem('currentOrganizationId', organization.id);\n            }\n            \n            // Get or sync database organization ID if needed\n            const currentDbOrgId = dbOrgId || localStorage.getItem('dbOrganizationId');\n            if (!currentDbOrgId && organization?.id) {\n                console.log('No database organization ID available - trying to sync user profile first');\n                try {\n                    await testCreateOrganization();\n                    // Small delay to ensure new ID is saved\n                    await new Promise(resolve => setTimeout(resolve, 500));\n                } catch (err) {\n                    console.error('Failed to sync user profile:', err);\n                }\n            }\n            \n            // Small delay to ensure localStorage is set\n            await new Promise(resolve => setTimeout(resolve, 300));\n            \n            const subscription = await subscriptionService.getCurrentSubscription();\n            console.log('Subscription loaded:', subscription);\n            setSubscription(subscription);\n        } catch (err: any) {\n            console.error(\"Error fetching subscription:\", err);\n            const errorMessage = err?.response?.data?.message || err.message || \"Failed to load subscription details\";\n            setError(errorMessage);\n            \n            // Check for token issues\n            if (typeof window !== 'undefined' && !localStorage.getItem('token')) {\n                setError('Authentication token is missing. Try signing in again.');\n            }\n        } finally {\n            setLoading(false);\n        }\n    } \n    \n    const handleRetry = () => {\n        // Reset subscription request flag\n        subscriptionRequested.current = false;\n        \n        // Refresh the token first\n        if (typeof window !== 'undefined' && window.dispatchEvent) {\n            window.dispatchEvent(new Event('refresh-token'));\n        }\n        \n        // Then retry the subscription fetch after a short delay\n        setTimeout(() => {\n            fetchSubscription();\n        }, 500);\n    };\n\n    // Test creating organization in the database\n    const testCreateOrganization = async () => {\n        // Don't attempt to call on server\n        if (typeof window === 'undefined') return;\n        \n        setApiTestLoading(true);\n        setApiTestResult(null);\n        \n        try {\n            const orgId = organization?.id || localStorage.getItem('currentOrganizationId');\n            const token = localStorage.getItem('token');\n            \n            if (!orgId || !token) {\n                throw new Error('Missing required organization ID or token');\n            }\n            \n            // Try to sync the user info first - this should create the organization as a side effect\n            const response = await fetch('http://localhost:4000/api/auth/me', {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json',\n                    'X-Organization-Id': orgId\n                }\n            });\n            \n            const responseText = await response.text();\n            let responseData;\n            \n            try {\n                responseData = JSON.parse(responseText);\n            } catch (e) {\n                responseData = { text: responseText };\n            }\n            \n            // Save the database organization ID\n            if (responseData?.organization?.id) {\n                localStorage.setItem('dbOrganizationId', responseData.organization.id);\n                setDbOrgId(responseData.organization.id);\n                console.log('Saved database organization ID:', responseData.organization.id);\n            }\n            \n            setApiTestResult({\n                status: response.status,\n                statusText: response.statusText,\n                headers: Object.fromEntries([...response.headers.entries()]),\n                data: responseData\n            });\n            \n            // After syncing, try to get subscription again\n            if (response.ok) {\n                setTimeout(() => {\n                    subscriptionRequested.current = false;\n                    fetchSubscription();\n                }, 1000);\n            }\n        } catch (err: any) {\n            setApiTestResult({\n                error: err.message,\n                stack: err.stack\n            });\n        } finally {\n            setApiTestLoading(false);\n        }\n    };\n\n    // Direct API testing function\n    const testDirectApiCall = async () => {\n        // Don't attempt to call on server\n        if (typeof window === 'undefined') return;\n        \n        setApiTestLoading(true);\n        setApiTestResult(null);\n        \n        try {\n            // Use database organization ID if available (important!)\n            const orgId = dbOrgId || localStorage.getItem('dbOrganizationId') || organization?.id || localStorage.getItem('currentOrganizationId');\n            const token = localStorage.getItem('token');\n            \n            if (!orgId || !token) {\n                throw new Error('Missing required organization ID or token');\n            }\n            \n            console.log('Making direct API call with organization ID:', orgId);\n            \n            // Make a direct fetch request\n            const response = await fetch(`http://localhost:4000/api/subscriptions/${orgId}`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json',\n                    'X-Organization-Id': organization?.id || localStorage.getItem('currentOrganizationId') || ''\n                }\n            });\n            \n            const responseText = await response.text();\n            let responseData;\n            \n            try {\n                responseData = JSON.parse(responseText);\n            } catch (e) {\n                responseData = { text: responseText };\n            }\n            \n            setApiTestResult({\n                status: response.status,\n                statusText: response.statusText,\n                headers: Object.fromEntries([...response.headers.entries()]),\n                data: responseData\n            });\n            \n            // If successful, update subscription state\n            if (response.ok && responseData?.subscription) {\n                setSubscription(responseData.subscription);\n            }\n        } catch (err: any) {\n            setApiTestResult({\n                error: err.message,\n                stack: err.stack\n            });\n        } finally {\n            setApiTestLoading(false);\n        }\n    };\n\n    // Try verifying token directly first\n    const testTokenVerification = async () => {\n        // Don't attempt to call on server\n        if (typeof window === 'undefined') return;\n        \n        setApiTestLoading(true);\n        setApiTestResult(null);\n        \n        try {\n            const token = localStorage.getItem('token');\n            \n            if (!token) {\n                throw new Error('Missing token');\n            }\n            \n            // Try verifying the token directly\n            const response = await fetch('http://localhost:4000/api/auth/verify', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ token })\n            });\n            \n            const responseText = await response.text();\n            let responseData;\n            \n            try {\n                responseData = JSON.parse(responseText);\n            } catch (e) {\n                responseData = { text: responseText };\n            }\n            \n            setApiTestResult({\n                status: response.status,\n                statusText: response.statusText,\n                headers: Object.fromEntries([...response.headers.entries()]),\n                data: responseData\n            });\n            \n            // If token verification succeeded, refresh debug info\n            if (response.ok && responseData?.success) {\n                setTimeout(() => {\n                    // Force the organization info to localStorage\n                    if (responseData?.organization?.id) {\n                        localStorage.setItem('currentOrganizationId', responseData.organization.id);\n                    }\n                    \n                    // Retry subscription fetch\n                    subscriptionRequested.current = false;\n                    fetchSubscription();\n                }, 1000);\n            }\n        } catch (err: any) {\n            setApiTestResult({\n                error: err.message,\n                stack: err.stack\n            });\n        } finally {\n            setApiTestLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"p-4\">\n            <h1 className=\"text-2xl font-bold mb-4\">Dashboard</h1>\n            <SignOutComponent />\n\n            <div className=\"mt-6 p-4 border rounded-lg bg-white shadow\">\n                <h2 className=\"text-xl font-semibold mb-2\">Subscription</h2>\n                \n                {!orgLoaded && <p>Loading organization data...</p>}\n                \n                {loading && orgLoaded && <p>Loading subscription information...</p>}\n                \n                {error && (\n                    <div className=\"bg-red-50 text-red-600 p-3 rounded mb-4\">\n                        <p>{error}</p>\n                        <button \n                            onClick={handleRetry}\n                            className=\"mt-2 bg-red-100 hover:bg-red-200 text-red-800 px-3 py-1 rounded text-sm\"\n                        >\n                            Retry\n                        </button>\n                    </div>\n                )}\n                \n                {!loading && !error && subscription && (\n                    <div>\n                        <p className=\"mb-2\">Status: <span className=\"font-medium\">{subscription?.status}</span></p>\n                        <pre className=\"bg-gray-50 p-2 rounded text-xs mt-4 overflow-auto max-h-40\">\n                            {JSON.stringify(subscription, null, 2)}\n                        </pre>\n                    </div>\n                )}\n                \n                {!loading && !error && !subscription && orgLoaded && (\n                    <p>No subscription found for this organization.</p>\n                )}\n            </div>\n            \n            {/* Direct API Testing */}\n            <div className=\"mt-6 p-4 border rounded-lg bg-white shadow\">\n                <h2 className=\"text-xl font-semibold mb-2\">API Diagnostics</h2>\n                <div className=\"flex gap-2 mb-3 flex-wrap\">\n                    <button \n                        onClick={testDirectApiCall}\n                        disabled={apiTestLoading}\n                        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 text-sm\"\n                    >\n                        {apiTestLoading ? 'Testing...' : 'Test Direct API Call'}\n                    </button>\n                    \n                    <button \n                        onClick={testCreateOrganization}\n                        disabled={apiTestLoading}\n                        className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 text-sm\"\n                    >\n                        {apiTestLoading ? 'Processing...' : 'Sync User Profile'}\n                    </button>\n                    \n                    <button \n                        onClick={testTokenVerification}\n                        disabled={apiTestLoading}\n                        className=\"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 text-sm\"\n                    >\n                        {apiTestLoading ? 'Processing...' : 'Verify Token'}\n                    </button>\n                </div>\n                \n                {apiTestResult && (\n                    <div className=\"mt-3\">\n                        <h3 className=\"text-md font-medium\">API Response:</h3>\n                        <pre className=\"bg-gray-50 p-2 rounded text-xs mt-2 overflow-auto max-h-80\">\n                            {JSON.stringify(apiTestResult, null, 2)}\n                        </pre>\n                    </div>\n                )}\n            </div>\n            \n            {/* Debug information */}\n            <div className=\"mt-6 p-4 border border-gray-300 rounded-lg bg-gray-50\">\n                <h3 className=\"text-sm font-bold mb-2 text-gray-700\">Debug Info</h3>\n                <pre className=\"text-xs overflow-auto max-h-40\">\n                    {JSON.stringify(debugInfo, null, 2)}\n                </pre>\n            </div>\n        </div>\n    )\n}\n\nexport default DashboardPage;"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AADA;;;;;AALA;;;;;;;AAQA,MAAM,gBAAgB;IAClB,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAc;IAC7D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAO,CAAC;IACjD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAO;IACxD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,EAAE,YAAY,EAAE,UAAU,SAAS,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,kBAAe,AAAD;IAC5D,MAAM,SAAS,CAAA,GAAA,uHAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,KAAK;IACjC,MAAM,oBAAoB,CAAA,GAAA,mGAAA,CAAA,SAAM,AAAD,EAAE;IACjC,MAAM,wBAAwB,CAAA,GAAA,mGAAA,CAAA,SAAM,AAAD,EAAE;IACrC,wCAAwC;IACxC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAiB;IAEtD,0CAA0C;IAC1C,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACN,oCAAoC;QACpC,MAAM,aAAa,aAAa,OAAO,CAAC;QACxC,IAAI,YAAY;YACZ,WAAW;QACf;IACJ,GAAG,EAAE;IAEL,qDAAqD;IACrD,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI,aAAa,cAAc,IAAI;YAC/B,kEAAkE;YAClE,aAAa,OAAO,CAAC,yBAAyB,aAAa,EAAE;YAC7D,QAAQ,GAAG,CAAC,mCAAmC,aAAa,EAAE;QAClE;IACJ,GAAG;QAAC;QAAW;KAAa;IAE5B,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACN,6CAA6C;QAC7C,MAAM,sBAAsB;YACxB,wCAAmC,OAAO;;QAO9C;QAEA,MAAM,cAAc;YAChB,OAAO,6EAA2D;QACtE;QAEA,oBAAoB;QACpB,aAAa;YACT,oBAAoB;YACpB,gBAAgB,cAAc,MAAM;YACpC,eAAe,WAAW,CAAC,6EAA2E,IAAI,KAAK;YAC/G,UAAU,YAAY;YACtB,mBAAmB,kBAAkB,OAAO;YAC5C,uBAAuB,sBAAsB,OAAO;YACpD,cAAc,yBAAyB;YACvC,MAAM;QACV;QAEA,mDAAmD;QACnD,IAAI,CAAC,WAAW;YACZ;QACJ;QAEA,uCAAuC;QACvC,IAAI,aAAa,sBAAsB,cAAc,MAAM,CAAC,kBAAkB,OAAO,EAAE;YACnF,kBAAkB,OAAO,GAAG;YAE5B,iCAAiC;YACjC,IAAI;gBACA,MAAM,cAAc,OAAO,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,oBAAoB,aAAa,EAAE;gBACxF,QAAQ,GAAG,CAAC,qDAAqD;gBACjE,OAAO,IAAI,CAAC;gBACZ;YACJ,EAAE,OAAO,KAAK;gBACV,QAAQ,KAAK,CAAC,uBAAuB;YACrC,wDAAwD;YAC5D;QACJ;QAEA,sEAAsE;QACtE,IAAI,cAAc,MAAM,CAAC,sBAAsB,OAAO,EAAE;YACpD,QAAQ,GAAG,CAAC,wDAAwD,aAAa,EAAE;YACnF,sBAAsB,OAAO,GAAG;YAChC;QACJ,OAEK,IAAI,YAAY,OAAO,aAAa,YACjC,SAAS,UAAU,CAAC,WACpB,CAAC,sBAAsB,OAAO,EAAE;YACpC,QAAQ,GAAG,CAAC,sDAAsD;YAClE,aAAa,OAAO,CAAC,yBAAyB;YAC9C,sBAAsB,OAAO,GAAG;YAChC;QACJ,OAEK,IAAI,gBAAkB,eACnB,aAAa,OAAO,CAAC,4BACrB,CAAC,sBAAsB,OAAO,EAAE;;QAIxC,OAEK,IAAI,sBAAsB,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc;YACjE,SAAS;QACb;IACJ,GAAG;QAAC;QAAW;QAAc;QAAU;QAAQ;QAAS;QAAc;KAAQ;IAG9E,MAAM,oBAAoB;QACtB,mCAAmC;QACnC,wCAAmC;;IA0CvC;IAEA,MAAM,cAAc;QAChB,kCAAkC;QAClC,sBAAsB,OAAO,GAAG;QAEhC,0BAA0B;QAC1B,uCAA2D;;QAE3D;QAEA,wDAAwD;QACxD,WAAW;YACP;QACJ,GAAG;IACP;IAEA,6CAA6C;IAC7C,MAAM,yBAAyB;QAC3B,kCAAkC;QAClC,wCAAmC;;IA6DvC;IAEA,8BAA8B;IAC9B,MAAM,oBAAoB;QACtB,kCAAkC;QAClC,wCAAmC;;IAsDvC;IAEA,qCAAqC;IACrC,MAAM,wBAAwB;QAC1B,kCAAkC;QAClC,wCAAmC;;IA0DvC;IAEA,qBACI,qKAAC;QAAI,WAAU;;0BACX,qKAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,qKAAC,yJAAA,CAAA,UAAgB;;;;;0BAEjB,qKAAC;gBAAI,WAAU;;kCACX,qKAAC;wBAAG,WAAU;kCAA6B;;;;;;oBAE1C,CAAC,2BAAa,qKAAC;kCAAE;;;;;;oBAEjB,WAAW,2BAAa,qKAAC;kCAAE;;;;;;oBAE3B,uBACG,qKAAC;wBAAI,WAAU;;0CACX,qKAAC;0CAAG;;;;;;0CACJ,qKAAC;gCACG,SAAS;gCACT,WAAU;0CACb;;;;;;;;;;;;oBAMR,CAAC,WAAW,CAAC,SAAS,8BACnB,qKAAC;;0CACG,qKAAC;gCAAE,WAAU;;oCAAO;kDAAQ,qKAAC;wCAAK,WAAU;kDAAe,cAAc;;;;;;;;;;;;0CACzE,qKAAC;gCAAI,WAAU;0CACV,KAAK,SAAS,CAAC,cAAc,MAAM;;;;;;;;;;;;oBAK/C,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,2BACpC,qKAAC;kCAAE;;;;;;;;;;;;0BAKX,qKAAC;gBAAI,WAAU;;kCACX,qKAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,qKAAC;wBAAI,WAAU;;0CACX,qKAAC;gCACG,SAAS;gCACT,UAAU;gCACV,WAAU;0CAET,iBAAiB,eAAe;;;;;;0CAGrC,qKAAC;gCACG,SAAS;gCACT,UAAU;gCACV,WAAU;0CAET,iBAAiB,kBAAkB;;;;;;0CAGxC,qKAAC;gCACG,SAAS;gCACT,UAAU;gCACV,WAAU;0CAET,iBAAiB,kBAAkB;;;;;;;;;;;;oBAI3C,+BACG,qKAAC;wBAAI,WAAU;;0CACX,qKAAC;gCAAG,WAAU;0CAAsB;;;;;;0CACpC,qKAAC;gCAAI,WAAU;0CACV,KAAK,SAAS,CAAC,eAAe,MAAM;;;;;;;;;;;;;;;;;;0BAOrD,qKAAC;gBAAI,WAAU;;kCACX,qKAAC;wBAAG,WAAU;kCAAuC;;;;;;kCACrD,qKAAC;wBAAI,WAAU;kCACV,KAAK,SAAS,CAAC,WAAW,MAAM;;;;;;;;;;;;;;;;;;AAKrD;uCAEe"}},
    {"offset": {"line": 1013, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}