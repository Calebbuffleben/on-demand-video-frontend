{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/pages/_document.tsx"],"sourcesContent":["import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body className=\"antialiased\">\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,qKAAC,yHAAA,CAAA,OAAI;QAAC,MAAK;;0BACT,qKAAC,yHAAA,CAAA,OAAI;;;;;0BACL,qKAAC;gBAAK,WAAU;;kCACd,qKAAC,yHAAA,CAAA,OAAI;;;;;kCACL,qKAAC,yHAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;AAInB"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useClerk, useUser } from '@clerk/nextjs';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: any;\n  loading: boolean;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const { signOut } = useClerk();\n  const { user, isLoaded: isUserLoaded } = useUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (isUserLoaded) {\n      setLoading(false);\n    }\n  }, [isUserLoaded]);\n\n  const logout = async () => {\n    await signOut();\n    router.push('/sign-in');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated: !!user,\n        user,\n        loading,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\nexport const useAuthService = () => {\n  const { session, user } = useClerk();\n\n  const getToken = async (): Promise<string | null> => {\n    try {\n      if (!session) return null;\n      return await session.getToken();\n    } catch (error) {\n      console.error('Error getting token:', error);\n      return null;\n    }\n  };\n\n  const isAuthenticated = (): boolean => {\n    return !!user;\n  };\n\n  const getUserDetails = () => {\n    if (!user) return null;\n    \n    return {\n      id: user.id,\n      fullName: `${user.firstName} ${user.lastName}`,\n      email: user.primaryEmailAddress?.emailAddress,\n      imageUrl: user.imageUrl\n    };\n  };\n\n  return {\n    getToken,\n    isAuthenticated,\n    getUserDetails\n  };\n};\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AACA;AAJA;;;;;AAaA,MAAM,4BAAc,CAAA,GAAA,mGAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAwD,CAAC,EAAE,QAAQ,EAAE;IAChF,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,WAAQ,AAAD;IAC3B,MAAM,EAAE,IAAI,EAAE,UAAU,YAAY,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAO,AAAD;IAC/C,MAAM,SAAS,CAAA,GAAA,uHAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,cAAc;YAChB,WAAW;QACb;IACF,GAAG;QAAC;KAAa;IAEjB,MAAM,SAAS;QACb,MAAM;QACN,OAAO,IAAI,CAAC;IACd;IAEA,qBACE,qKAAC,YAAY,QAAQ;QACnB,OAAO;YACL,iBAAiB,CAAC,CAAC;YACnB;YACA;YACA;QACF;kBAEC;;;;;;AAGP;AAEO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,mGAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AACO,MAAM,iBAAiB;IAC5B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,WAAQ,AAAD;IAEjC,MAAM,WAAW;QACf,IAAI;YACF,IAAI,CAAC,SAAS,OAAO;YACrB,OAAO,MAAM,QAAQ,QAAQ;QAC/B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO;QACT;IACF;IAEA,MAAM,kBAAkB;QACtB,OAAO,CAAC,CAAC;IACX;IAEA,MAAM,iBAAiB;QACrB,IAAI,CAAC,MAAM,OAAO;QAElB,OAAO;YACL,IAAI,KAAK,EAAE;YACX,UAAU,GAAG,KAAK,SAAS,CAAC,CAAC,EAAE,KAAK,QAAQ,EAAE;YAC9C,OAAO,KAAK,mBAAmB,EAAE;YACjC,UAAU,KAAK,QAAQ;QACzB;IACF;IAEA,OAAO;QACL;QACA;QACA;IACF;AACF"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/pages/_app.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport type { AppProps } from \"next/app\";\nimport { AuthProvider } from \"../contexts/AuthContext\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <ClerkProvider {...pageProps}>\n      <AuthProvider>\n        <Component {...pageProps} />\n      </AuthProvider>\n    </ClerkProvider>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAFA;;;;;AAIe,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAY;IAC5D,qBACE,qKAAC,kKAAA,CAAA,gBAAa;QAAE,GAAG,SAAS;kBAC1B,cAAA,qKAAC,wHAAA,CAAA,eAAY;sBACX,cAAA,qKAAC;gBAAW,GAAG,SAAS;;;;;;;;;;;;;;;;AAIhC"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebbuffleben/Desktop/projetos/stream/frontend/src/pages/%5BtenantId%5D/dashboard/index.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { useOrganization } from \"@clerk/nextjs\";\nimport { useRouter } from \"next/router\";\nimport dynamic from 'next/dynamic';\n\n// Import SignOutComponent with no SSR\nconst SignOutComponent = dynamic(\n  () => import('@/components/ui/SignOutComponent/SignOutComponent'),\n  { ssr: false }\n);\n\n// ClientOnly wrapper component\nconst ClientOnly = ({ children }: { children: React.ReactNode }) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) return null;\n  return <>{children}</>;\n};\n\n// Dashboard component with no SSR\nconst DashboardPage = () => {\n  const [subscription, setSubscription] = useState<null | any>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [debugInfo, setDebugInfo] = useState<any>({});\n  const [apiTestResult, setApiTestResult] = useState<any>(null);\n  const [apiTestLoading, setApiTestLoading] = useState(false);\n  const { organization, isLoaded: orgLoaded } = useOrganization();\n  const router = useRouter();\n  const { tenantId } = router.query;\n  const redirectAttempted = useRef(false);\n  const subscriptionRequested = useRef(false);\n  // Initialize state without localStorage\n  const [dbOrgId, setDbOrgId] = useState<string | null>(null);\n  const [subscriptionService, setSubscriptionService] = useState<any>(null);\n  \n  // Load the subscription service module safely\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      // Only load on client side\n      import('@/api-connection/subscriptions').then((module) => {\n        setSubscriptionService(module.default);\n      });\n    }\n  }, []);\n  \n  // Load localStorage values only on client\n  useEffect(() => {\n    // This code only runs on the client\n    const savedOrgId = localStorage.getItem('dbOrganizationId');\n    if (savedOrgId) {\n      setDbOrgId(savedOrgId);\n    }\n  }, []);\n    \n  // Force Clerk organization context into localStorage\n  useEffect(() => {\n    if (orgLoaded && organization?.id) {\n      // Always ensure the organization ID from Clerk is in localStorage\n      localStorage.setItem('currentOrganizationId', organization.id);\n      console.log('Set organization ID from Clerk:', organization.id);\n    }\n  }, [orgLoaded, organization]);\n  \n  useEffect(() => {\n    // Safe way to access localStorage in Next.js\n    const getLocalStorageData = () => {\n      if (typeof window === 'undefined') return null;\n      \n      return {\n        token: localStorage.getItem('token') ? 'Present' : 'Missing',\n        clerkOrgId: localStorage.getItem('currentOrganizationId') || 'None',\n        dbOrgId: localStorage.getItem('dbOrganizationId') || 'None'\n      };\n    };\n    \n    const getPathData = () => {\n      return typeof window !== 'undefined' ? window.location.pathname : 'No window';\n    };\n    \n    // Update debug info\n    setDebugInfo({\n      organizationLoaded: orgLoaded, \n      organizationId: organization?.id || 'None',\n      databaseOrgId: dbOrgId || (typeof window !== 'undefined' ? localStorage.getItem('dbOrganizationId') : null) || 'None',\n      tenantId: tenantId || 'None',\n      redirectAttempted: redirectAttempted.current,\n      subscriptionRequested: subscriptionRequested.current,\n      serviceLoaded: !!subscriptionService,\n      localStorage: getLocalStorageData() || 'No window',\n      path: getPathData()\n    });\n    \n    // Don't proceed until Clerk organization and subscription service are loaded\n    if (!orgLoaded || !subscriptionService) {\n      return;\n    }\n    \n    // Handle URL with template placeholder\n    if (tenantId === '{organizationId}' && organization?.id && !redirectAttempted.current) {\n      redirectAttempted.current = true;\n      \n      // Try to redirect to correct URL\n      try {\n        const correctPath = window.location.pathname.replace('{organizationId}', organization.id);\n        console.log('Redirecting to correct path with organization ID:', correctPath);\n        router.push(correctPath);\n        return;\n      } catch (err) {\n        console.error('Failed to redirect:', err);\n        // Continue with template URL but use Clerk organization\n      }\n    }\n    \n    // If we have organization context, fetch subscription (but only once)\n    if (organization?.id && !subscriptionRequested.current) {\n      console.log('Fetching subscription using organization from Clerk:', organization.id);\n      subscriptionRequested.current = true;\n      fetchSubscription();\n    }\n    // If we have a valid organization ID in the URL, use that (but only once)\n    else if (tenantId && typeof tenantId === 'string' && \n            tenantId.startsWith('org_') && \n            !subscriptionRequested.current) {\n      console.log('Fetching subscription using organization from URL:', tenantId);\n      localStorage.setItem('currentOrganizationId', tenantId);\n      subscriptionRequested.current = true;\n      fetchSubscription();\n    }\n    // If we have an organization ID in localStorage but not from other sources, use that (but only once)\n    else if (typeof window !== 'undefined' && \n            localStorage.getItem('currentOrganizationId') && \n            !subscriptionRequested.current) {\n      console.log('Fetching subscription using organization from localStorage');\n      subscriptionRequested.current = true;\n      fetchSubscription();\n    }\n    // If we've already tried to fetch but got an error, show the error\n    else if (subscriptionRequested.current && !loading && !subscription) {\n      setError(\"No organization context available or subscription could not be loaded\");\n    }\n  }, [orgLoaded, organization, tenantId, router, loading, subscription, dbOrgId, subscriptionService]);\n  \n\n  const fetchSubscription = async () => {\n    // Don't attempt to fetch on server or if service isn't loaded\n    if (typeof window === 'undefined' || !subscriptionService) return;\n    \n    setLoading(true);\n    setError(null);\n    try {\n      // Use the Clerk organization ID directly\n      if (organization?.id) {\n        console.log('Using organization ID from Clerk for API call:', organization.id);\n        localStorage.setItem('currentOrganizationId', organization.id);\n      }\n      \n      // Get or sync database organization ID if needed\n      const currentDbOrgId = dbOrgId || localStorage.getItem('dbOrganizationId');\n      if (!currentDbOrgId && organization?.id) {\n        console.log('No database organization ID available - trying to sync user profile first');\n        try {\n          await testCreateOrganization();\n          // Small delay to ensure new ID is saved\n          await new Promise(resolve => setTimeout(resolve, 500));\n        } catch (err) {\n          console.error('Failed to sync user profile:', err);\n        }\n      }\n      \n      // Small delay to ensure localStorage is set\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const subscription = await subscriptionService.getCurrentSubscription();\n      console.log('Subscription loaded:', subscription);\n      setSubscription(subscription);\n    } catch (err: any) {\n      console.error(\"Error fetching subscription:\", err);\n      const errorMessage = err?.response?.data?.message || err.message || \"Failed to load subscription details\";\n      setError(errorMessage);\n      \n      // Check for token issues\n      if (typeof window !== 'undefined' && !localStorage.getItem('token')) {\n        setError('Authentication token is missing. Try signing in again.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  } \n  \n  const handleRetry = () => {\n    // Don't proceed if we're on the server or service isn't loaded\n    if (typeof window === 'undefined' || !subscriptionService) return;\n    \n    // Reset subscription request flag\n    subscriptionRequested.current = false;\n    \n    // Refresh the token first\n    if (window.dispatchEvent) {\n      window.dispatchEvent(new Event('refresh-token'));\n    }\n    \n    // Then retry the subscription fetch after a short delay\n    setTimeout(() => {\n      fetchSubscription();\n    }, 500);\n  };\n\n  // Test creating organization in the database\n  const testCreateOrganization = async () => {\n    // Don't attempt to call on server\n    if (typeof window === 'undefined') return;\n    \n    setApiTestLoading(true);\n    setApiTestResult(null);\n    \n    try {\n      const orgId = organization?.id || localStorage.getItem('currentOrganizationId');\n      const token = localStorage.getItem('token');\n      \n      if (!orgId || !token) {\n        throw new Error('Missing required organization ID or token');\n      }\n      \n      // Try to sync the user info first - this should create the organization as a side effect\n      const response = await fetch('http://localhost:4000/api/auth/me', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'X-Organization-Id': orgId\n        }\n      });\n      \n      const responseText = await response.text();\n      let responseData;\n      \n      try {\n        responseData = JSON.parse(responseText);\n      } catch (e) {\n        responseData = { text: responseText };\n      }\n      \n      // Save the database organization ID\n      if (responseData?.organization?.id) {\n        localStorage.setItem('dbOrganizationId', responseData.organization.id);\n        setDbOrgId(responseData.organization.id);\n        console.log('Saved database organization ID:', responseData.organization.id);\n      }\n      \n      setApiTestResult({\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries([...response.headers.entries()]),\n        data: responseData\n      });\n      \n      // After syncing, try to get subscription again\n      if (response.ok) {\n        setTimeout(() => {\n          subscriptionRequested.current = false;\n          fetchSubscription();\n        }, 1000);\n      }\n    } catch (err: any) {\n      setApiTestResult({\n        error: err.message,\n        stack: err.stack\n      });\n    } finally {\n      setApiTestLoading(false);\n    }\n  };\n\n  // Direct API testing function\n  const testDirectApiCall = async () => {\n    // Don't attempt to call on server\n    if (typeof window === 'undefined') return;\n    \n    setApiTestLoading(true);\n    setApiTestResult(null);\n    \n    try {\n      // Use database organization ID if available (important!)\n      const orgId = dbOrgId || localStorage.getItem('dbOrganizationId') || organization?.id || localStorage.getItem('currentOrganizationId');\n      const token = localStorage.getItem('token');\n      \n      if (!orgId || !token) {\n        throw new Error('Missing required organization ID or token');\n      }\n      \n      console.log('Making direct API call with organization ID:', orgId);\n      \n      // Make a direct fetch request\n      const response = await fetch(`http://localhost:4000/api/subscriptions/${orgId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'X-Organization-Id': organization?.id || localStorage.getItem('currentOrganizationId') || ''\n        }\n      });\n      \n      const responseText = await response.text();\n      let responseData;\n      \n      try {\n        responseData = JSON.parse(responseText);\n      } catch (e) {\n        responseData = { text: responseText };\n      }\n      \n      setApiTestResult({\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries([...response.headers.entries()]),\n        data: responseData\n      });\n      \n      // If successful, update subscription state\n      if (response.ok && responseData?.subscription) {\n        setSubscription(responseData.subscription);\n      }\n    } catch (err: any) {\n      setApiTestResult({\n        error: err.message,\n        stack: err.stack\n      });\n    } finally {\n      setApiTestLoading(false);\n    }\n  };\n\n  // Try verifying token directly first\n  const testTokenVerification = async () => {\n    // Don't attempt to call on server\n    if (typeof window === 'undefined') return;\n    \n    setApiTestLoading(true);\n    setApiTestResult(null);\n    \n    try {\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        throw new Error('Missing token');\n      }\n      \n      // Try verifying the token directly\n      const response = await fetch('http://localhost:4000/api/auth/verify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token })\n      });\n      \n      const responseText = await response.text();\n      let responseData;\n      \n      try {\n        responseData = JSON.parse(responseText);\n      } catch (e) {\n        responseData = { text: responseText };\n      }\n      \n      setApiTestResult({\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries([...response.headers.entries()]),\n        data: responseData\n      });\n      \n      // If token verification succeeded, refresh debug info\n      if (response.ok && responseData?.success) {\n        setTimeout(() => {\n          // Force the organization info to localStorage\n          if (responseData?.organization?.id) {\n            localStorage.setItem('currentOrganizationId', responseData.organization.id);\n          }\n          \n          // Retry subscription fetch\n          subscriptionRequested.current = false;\n          fetchSubscription();\n        }, 1000);\n      }\n    } catch (err: any) {\n      setApiTestResult({\n        error: err.message,\n        stack: err.stack\n      });\n    } finally {\n      setApiTestLoading(false);\n    }\n  };\n\n  return (\n    <ClientOnly>\n      <div className=\"p-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Dashboard</h1>\n        <SignOutComponent />\n\n        <div className=\"mt-6 p-4 border rounded-lg bg-white shadow\">\n          <h2 className=\"text-xl font-semibold mb-2\">Subscription</h2>\n          \n          {!orgLoaded && <p>Loading organization data...</p>}\n          \n          {loading && orgLoaded && <p>Loading subscription information...</p>}\n          \n          {error && (\n            <div className=\"bg-red-50 text-red-600 p-3 rounded mb-4\">\n              <p>{error}</p>\n              <button \n                onClick={handleRetry}\n                className=\"mt-2 bg-red-100 hover:bg-red-200 text-red-800 px-3 py-1 rounded text-sm\"\n              >\n                Retry\n              </button>\n            </div>\n          )}\n          \n          {!loading && !error && subscription && (\n            <div>\n              <p className=\"mb-2\">Status: <span className=\"font-medium\">{subscription?.status}</span></p>\n              <pre className=\"bg-gray-50 p-2 rounded text-xs mt-4 overflow-auto max-h-40\">\n                {JSON.stringify(subscription, null, 2)}\n              </pre>\n            </div>\n          )}\n          \n          {!loading && !error && !subscription && orgLoaded && (\n            <p>No subscription found for this organization.</p>\n          )}\n        </div>\n        \n        {/* Direct API Testing */}\n        <div className=\"mt-6 p-4 border rounded-lg bg-white shadow\">\n          <h2 className=\"text-xl font-semibold mb-2\">API Diagnostics</h2>\n          <div className=\"flex gap-2 mb-3 flex-wrap\">\n            <button \n              onClick={testDirectApiCall}\n              disabled={apiTestLoading}\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 text-sm\"\n            >\n              {apiTestLoading ? 'Testing...' : 'Test Direct API Call'}\n            </button>\n            \n            <button \n              onClick={testCreateOrganization}\n              disabled={apiTestLoading}\n              className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 text-sm\"\n            >\n              {apiTestLoading ? 'Processing...' : 'Sync User Profile'}\n            </button>\n            \n            <button \n              onClick={testTokenVerification}\n              disabled={apiTestLoading}\n              className=\"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 text-sm\"\n            >\n              {apiTestLoading ? 'Processing...' : 'Verify Token'}\n            </button>\n          </div>\n          \n          {apiTestResult && (\n            <div className=\"mt-3\">\n              <h3 className=\"text-md font-medium\">API Response:</h3>\n              <pre className=\"bg-gray-50 p-2 rounded text-xs mt-2 overflow-auto max-h-80\">\n                {JSON.stringify(apiTestResult, null, 2)}\n              </pre>\n            </div>\n          )}\n        </div>\n        \n        {/* Debug information */}\n        <div className=\"mt-6 p-4 border border-gray-300 rounded-lg bg-gray-50\">\n          <h3 className=\"text-sm font-bold mb-2 text-gray-700\">Debug Info</h3>\n          <pre className=\"text-xs overflow-auto max-h-40\">\n            {JSON.stringify(debugInfo, null, 2)}\n          </pre>\n        </div>\n      </div>\n    </ClientOnly>\n  )\n}\n\nexport default DashboardPage;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 692, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}